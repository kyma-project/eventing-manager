// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	context "context"

	v1alpha2 "github.com/kyma-project/eventing-manager/api/eventing/v1alpha2"
	mock "github.com/stretchr/testify/mock"
)

// SubscriptionValidator is an autogenerated mock type for the SubscriptionValidator type
type SubscriptionValidator struct {
	mock.Mock
}

type SubscriptionValidator_Expecter struct {
	mock *mock.Mock
}

func (_m *SubscriptionValidator) EXPECT() *SubscriptionValidator_Expecter {
	return &SubscriptionValidator_Expecter{mock: &_m.Mock}
}

// Validate provides a mock function with given fields: ctx, subscription
func (_m *SubscriptionValidator) Validate(ctx context.Context, subscription v1alpha2.Subscription) error {
	ret := _m.Called(ctx, subscription)

	if len(ret) == 0 {
		panic("no return value specified for Validate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, v1alpha2.Subscription) error); ok {
		r0 = rf(ctx, subscription)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SubscriptionValidator_Validate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Validate'
type SubscriptionValidator_Validate_Call struct {
	*mock.Call
}

// Validate is a helper method to define mock.On call
//   - ctx context.Context
//   - subscription v1alpha2.Subscription
func (_e *SubscriptionValidator_Expecter) Validate(ctx interface{}, subscription interface{}) *SubscriptionValidator_Validate_Call {
	return &SubscriptionValidator_Validate_Call{Call: _e.mock.On("Validate", ctx, subscription)}
}

func (_c *SubscriptionValidator_Validate_Call) Run(run func(ctx context.Context, subscription v1alpha2.Subscription)) *SubscriptionValidator_Validate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(v1alpha2.Subscription))
	})
	return _c
}

func (_c *SubscriptionValidator_Validate_Call) Return(_a0 error) *SubscriptionValidator_Validate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SubscriptionValidator_Validate_Call) RunAndReturn(run func(context.Context, v1alpha2.Subscription) error) *SubscriptionValidator_Validate_Call {
	_c.Call.Return(run)
	return _c
}

// NewSubscriptionValidator creates a new instance of SubscriptionValidator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSubscriptionValidator(t interface {
	mock.TestingT
	Cleanup(func())
}) *SubscriptionValidator {
	mock := &SubscriptionValidator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
