// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	context "context"

	env "github.com/kyma-project/eventing-manager/pkg/env"

	mock "github.com/stretchr/testify/mock"

	v1alpha1 "github.com/kyma-project/eventing-manager/api/operator/v1alpha1"
)

// NatsConfigHandler is an autogenerated mock type for the NatsConfigHandler type
type NatsConfigHandler struct {
	mock.Mock
}

type NatsConfigHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *NatsConfigHandler) EXPECT() *NatsConfigHandler_Expecter {
	return &NatsConfigHandler_Expecter{mock: &_m.Mock}
}

// GetNatsConfig provides a mock function with given fields: ctx, _a1
func (_m *NatsConfigHandler) GetNatsConfig(ctx context.Context, _a1 v1alpha1.Eventing) (*env.NATSConfig, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetNatsConfig")
	}

	var r0 *env.NATSConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, v1alpha1.Eventing) (*env.NATSConfig, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, v1alpha1.Eventing) *env.NATSConfig); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*env.NATSConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, v1alpha1.Eventing) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NatsConfigHandler_GetNatsConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNatsConfig'
type NatsConfigHandler_GetNatsConfig_Call struct {
	*mock.Call
}

// GetNatsConfig is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 v1alpha1.Eventing
func (_e *NatsConfigHandler_Expecter) GetNatsConfig(ctx interface{}, _a1 interface{}) *NatsConfigHandler_GetNatsConfig_Call {
	return &NatsConfigHandler_GetNatsConfig_Call{Call: _e.mock.On("GetNatsConfig", ctx, _a1)}
}

func (_c *NatsConfigHandler_GetNatsConfig_Call) Run(run func(ctx context.Context, _a1 v1alpha1.Eventing)) *NatsConfigHandler_GetNatsConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(v1alpha1.Eventing))
	})
	return _c
}

func (_c *NatsConfigHandler_GetNatsConfig_Call) Return(_a0 *env.NATSConfig, _a1 error) *NatsConfigHandler_GetNatsConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NatsConfigHandler_GetNatsConfig_Call) RunAndReturn(run func(context.Context, v1alpha1.Eventing) (*env.NATSConfig, error)) *NatsConfigHandler_GetNatsConfig_Call {
	_c.Call.Return(run)
	return _c
}

// NewNatsConfigHandler creates a new instance of NatsConfigHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNatsConfigHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *NatsConfigHandler {
	mock := &NatsConfigHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
