// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	nats "github.com/nats-io/nats.go"
	mock "github.com/stretchr/testify/mock"
)

// Connection is an autogenerated mock type for the Interface type
type Connection struct {
	mock.Mock
}

type Connection_Expecter struct {
	mock *mock.Mock
}

func (_m *Connection) EXPECT() *Connection_Expecter {
	return &Connection_Expecter{mock: &_m.Mock}
}

// Connect provides a mock function with given fields: handler, errorHandler
func (_m *Connection) Connect(handler nats.ConnHandler, errorHandler nats.ConnErrHandler) error {
	ret := _m.Called(handler, errorHandler)

	if len(ret) == 0 {
		panic("no return value specified for Connect")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(nats.ConnHandler, nats.ConnErrHandler) error); ok {
		r0 = rf(handler, errorHandler)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Connection_Connect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Connect'
type Connection_Connect_Call struct {
	*mock.Call
}

// Connect is a helper method to define mock.On call
//   - handler nats.ConnHandler
//   - errorHandler nats.ConnErrHandler
func (_e *Connection_Expecter) Connect(handler interface{}, errorHandler interface{}) *Connection_Connect_Call {
	return &Connection_Connect_Call{Call: _e.mock.On("Connect", handler, errorHandler)}
}

func (_c *Connection_Connect_Call) Run(run func(handler nats.ConnHandler, errorHandler nats.ConnErrHandler)) *Connection_Connect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(nats.ConnHandler), args[1].(nats.ConnErrHandler))
	})
	return _c
}

func (_c *Connection_Connect_Call) Return(_a0 error) *Connection_Connect_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Connection_Connect_Call) RunAndReturn(run func(nats.ConnHandler, nats.ConnErrHandler) error) *Connection_Connect_Call {
	_c.Call.Return(run)
	return _c
}

// Disconnect provides a mock function with no fields
func (_m *Connection) Disconnect() {
	_m.Called()
}

// Connection_Disconnect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Disconnect'
type Connection_Disconnect_Call struct {
	*mock.Call
}

// Disconnect is a helper method to define mock.On call
func (_e *Connection_Expecter) Disconnect() *Connection_Disconnect_Call {
	return &Connection_Disconnect_Call{Call: _e.mock.On("Disconnect")}
}

func (_c *Connection_Disconnect_Call) Run(run func()) *Connection_Disconnect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Connection_Disconnect_Call) Return() *Connection_Disconnect_Call {
	_c.Call.Return()
	return _c
}

func (_c *Connection_Disconnect_Call) RunAndReturn(run func()) *Connection_Disconnect_Call {
	_c.Run(run)
	return _c
}

// NewConnection creates a new instance of Connection. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConnection(t interface {
	mock.TestingT
	Cleanup(func())
}) *Connection {
	mock := &Connection{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
