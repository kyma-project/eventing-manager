name: e2e

env:
  KYMA_STABILITY: "unstable"
  KYMA: "./hack/kyma"

on:
  push:
    branches:
      - main
      - "release-**"
    paths-ignore:
      - "docs/**"
      - "**.md"
      - "sec-scanners-config.yaml"
      - CODEOWNERS
      - LICENSE
      - LICENSES
      - OWNERS
      - OWNERS_ALIASES
      - PROJECT
  pull_request:
    branches:
      - main
      - "release-**"
    paths:
      - "**.go"
      - go.mod
      - Dockerfile"

jobs:
  export-info:
    runs-on: ubuntu-latest
    outputs:
      image-name: ${{ steps.extract-image.outputs.image_name }}
      git-ref: ${{ steps.extract-image.outputs.git_ref }}
    steps:
      - name: export correct info based on event (PR or Push)
        id: extract-image
        env:
          GIT_EVENT_NAME: "${{ github.event_name }}"
          PR_NUMBER: "${{ github.event.number }}"
          PR_HEAD_SHA: "${{ github.event.pull_request.head.sha }}"
          HEAD_SHA: "${{ github.sha }}"
        run: |
          if [[ $GIT_EVENT_NAME == "pull_request" ]]
          then
            echo "exporting info for pull request..."
            echo "image_name=europe-docker.pkg.dev/kyma-project/dev/eventing-manager:PR-${PR_NUMBER}" >> "$GITHUB_OUTPUT"
            echo "git_ref=${PR_HEAD_SHA}" >> "$GITHUB_OUTPUT"
          else
            echo "exporting info for push..."
            echo "image_name=europe-docker.pkg.dev/kyma-project/prod/eventing-manager:${HEAD_SHA}" >> "$GITHUB_OUTPUT"
            echo "git_ref=${HEAD_SHA}" >> "$GITHUB_OUTPUT"
          fi
      - name: Print info
        env:
          IMAGE_NAME: ${{ steps.extract-image.outputs.image_name }}
          GIT_REF: ${{ steps.extract-image.outputs.git_ref }}
        run: |
          echo "IMAGE: $IMAGE_NAME"
          echo "Git ref: $GIT_REF"
          

  wait-until-build-succeeds:
    needs: export-info
    uses: "kyma-project/eventing-tools/.github/workflows/wait-build-reusable.yml@main"
    with:
      repository: ${{ github.repository_owner }}/eventing-manager
      git_ref: ${{ needs.export-info.outputs.git-ref }}
      git_check_run_name: "build / Build image"

  nats:
    runs-on: ubuntu-latest
    needs: [export-info, wait-until-build-succeeds]
    env:
      MANAGER_IMAGE: ${{ needs.export-info.outputs.image-name }}

    steps:
      - uses: actions/checkout@v5

      - name: Setup Go via go.mod
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - run: go version

      - name: Install k3d tools
        run: |
          make -C hack/ci/ install-k3d-tools

      - name: Install Kyma CLI & setup k3d cluster using kyma CLI
        run: |
          make kyma
          make -C hack/ci/ create-k3d
          kubectl version
          kubectl cluster-info

      - name: Install eventing-manager
        run: |
          make install IMG=$MANAGER_IMAGE

      - name: Deploy the controller to the cluster
        run: |
          kubectl create ns kyma-system || true
          make deploy IMG=$MANAGER_IMAGE

      - name: Setup NATS
        run: |
          make -C hack/ci/ install-nats-module

      - name: Setup and test the eventing-manager
        run: |
          make e2e-setup

      - name: Setup eventing
        run: |
          make e2e-eventing-setup

      - name: Test eventing
        run: |
          make e2e-eventing

      - name: Test eventing cleanup
        run: |
          make e2e-cleanup

      - name: On error get NATS CR
        if: failure()
        run: |
          kubectl get nats -n kyma-system -o yaml

      - name: On error get eventing CR
        if: failure()
        run: |
          kubectl get eventing -n kyma-system -o yaml

  PeerAuthentication:
    runs-on: ubuntu-latest
    needs: [export-info, wait-until-build-succeeds]
    env:
      MANAGER_IMAGE: ${{ needs.export-info.outputs.image-name }}

    steps:
      - uses: actions/checkout@v5

      - name: Setup Go via go.mod
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - run: go version

      - name: Install k3d tools
        run: |
          make -C hack/ci/ install-k3d-tools

      - name: Install Kyma CLI & setup k3d cluster using kyma CLI
        run: |
          make kyma
          make -C hack/ci/ create-k3d
          kubectl version
          kubectl cluster-info

      - name: Install PeerAuthentication CRD
        run: |
          make -C hack/ci/ apply-peerauthentication-crd

      - name: Install eventing-manager
        run: |
          make install IMG=$MANAGER_IMAGE

      - name: Deploy the controller to the cluster
        run: |
          kubectl create ns kyma-system || true
          make deploy IMG=$MANAGER_IMAGE

      - name: Test if the PeerAuthentications are created correctly
        run: |
          make e2e-eventing-peerauthentications

      - name: On error get all PeerAuthentications
        if: failure()
        run: |
          kubectl get peerauthentications.security.istio.io -A -o yaml

  backend-switching:
    needs: [export-info, wait-until-build-succeeds]
    if: github.event_name == 'push'
    uses: "./.github/workflows/e2e-backend-switching-reuseable.yml"
    with:
      eventing-manager-image: ${{ needs.export-info.outputs.image-name }}
      cluster-name-prefix: "ghem-"
    secrets: inherit
