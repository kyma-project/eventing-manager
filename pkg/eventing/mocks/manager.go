// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	context "context"

	env "github.com/kyma-project/eventing-manager/pkg/env"

	mock "github.com/stretchr/testify/mock"

	v1 "k8s.io/api/apps/v1"

	v1alpha1 "github.com/kyma-project/eventing-manager/api/v1alpha1"
)

// Manager is an autogenerated mock type for the Manager type
type Manager struct {
	mock.Mock
}

type Manager_Expecter struct {
	mock *mock.Mock
}

func (_m *Manager) EXPECT() *Manager_Expecter {
	return &Manager_Expecter{mock: &_m.Mock}
}

// DeployHPA provides a mock function with given fields: ctx, deployment, _a2, cpuUtilization, memoryUtilization
func (_m *Manager) DeployHPA(ctx context.Context, deployment *v1.Deployment, _a2 *v1alpha1.Eventing, cpuUtilization int32, memoryUtilization int32) error {
	ret := _m.Called(ctx, deployment, _a2, cpuUtilization, memoryUtilization)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.Deployment, *v1alpha1.Eventing, int32, int32) error); ok {
		r0 = rf(ctx, deployment, _a2, cpuUtilization, memoryUtilization)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Manager_DeployHPA_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeployHPA'
type Manager_DeployHPA_Call struct {
	*mock.Call
}

// DeployHPA is a helper method to define mock.On call
//   - ctx context.Context
//   - deployment *v1.Deployment
//   - _a2 *v1alpha1.Eventing
//   - cpuUtilization int32
//   - memoryUtilization int32
func (_e *Manager_Expecter) DeployHPA(ctx interface{}, deployment interface{}, _a2 interface{}, cpuUtilization interface{}, memoryUtilization interface{}) *Manager_DeployHPA_Call {
	return &Manager_DeployHPA_Call{Call: _e.mock.On("DeployHPA", ctx, deployment, _a2, cpuUtilization, memoryUtilization)}
}

func (_c *Manager_DeployHPA_Call) Run(run func(ctx context.Context, deployment *v1.Deployment, _a2 *v1alpha1.Eventing, cpuUtilization int32, memoryUtilization int32)) *Manager_DeployHPA_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1.Deployment), args[2].(*v1alpha1.Eventing), args[3].(int32), args[4].(int32))
	})
	return _c
}

func (_c *Manager_DeployHPA_Call) Return(_a0 error) *Manager_DeployHPA_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Manager_DeployHPA_Call) RunAndReturn(run func(context.Context, *v1.Deployment, *v1alpha1.Eventing, int32, int32) error) *Manager_DeployHPA_Call {
	_c.Call.Return(run)
	return _c
}

// DeployPublisherProxy provides a mock function with given fields: ctx, _a1, backendType
func (_m *Manager) DeployPublisherProxy(ctx context.Context, _a1 *v1alpha1.Eventing, backendType v1alpha1.BackendType) (*v1.Deployment, error) {
	ret := _m.Called(ctx, _a1, backendType)

	var r0 *v1.Deployment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1alpha1.Eventing, v1alpha1.BackendType) (*v1.Deployment, error)); ok {
		return rf(ctx, _a1, backendType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1alpha1.Eventing, v1alpha1.BackendType) *v1.Deployment); ok {
		r0 = rf(ctx, _a1, backendType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Deployment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1alpha1.Eventing, v1alpha1.BackendType) error); ok {
		r1 = rf(ctx, _a1, backendType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Manager_DeployPublisherProxy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeployPublisherProxy'
type Manager_DeployPublisherProxy_Call struct {
	*mock.Call
}

// DeployPublisherProxy is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 *v1alpha1.Eventing
//   - backendType v1alpha1.BackendType
func (_e *Manager_Expecter) DeployPublisherProxy(ctx interface{}, _a1 interface{}, backendType interface{}) *Manager_DeployPublisherProxy_Call {
	return &Manager_DeployPublisherProxy_Call{Call: _e.mock.On("DeployPublisherProxy", ctx, _a1, backendType)}
}

func (_c *Manager_DeployPublisherProxy_Call) Run(run func(ctx context.Context, _a1 *v1alpha1.Eventing, backendType v1alpha1.BackendType)) *Manager_DeployPublisherProxy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1alpha1.Eventing), args[2].(v1alpha1.BackendType))
	})
	return _c
}

func (_c *Manager_DeployPublisherProxy_Call) Return(_a0 *v1.Deployment, _a1 error) *Manager_DeployPublisherProxy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Manager_DeployPublisherProxy_Call) RunAndReturn(run func(context.Context, *v1alpha1.Eventing, v1alpha1.BackendType) (*v1.Deployment, error)) *Manager_DeployPublisherProxy_Call {
	_c.Call.Return(run)
	return _c
}

// DeployPublisherProxyResources provides a mock function with given fields: _a0, _a1, _a2
func (_m *Manager) DeployPublisherProxyResources(_a0 context.Context, _a1 *v1alpha1.Eventing, _a2 *v1.Deployment) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1alpha1.Eventing, *v1.Deployment) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Manager_DeployPublisherProxyResources_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeployPublisherProxyResources'
type Manager_DeployPublisherProxyResources_Call struct {
	*mock.Call
}

// DeployPublisherProxyResources is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *v1alpha1.Eventing
//   - _a2 *v1.Deployment
func (_e *Manager_Expecter) DeployPublisherProxyResources(_a0 interface{}, _a1 interface{}, _a2 interface{}) *Manager_DeployPublisherProxyResources_Call {
	return &Manager_DeployPublisherProxyResources_Call{Call: _e.mock.On("DeployPublisherProxyResources", _a0, _a1, _a2)}
}

func (_c *Manager_DeployPublisherProxyResources_Call) Run(run func(_a0 context.Context, _a1 *v1alpha1.Eventing, _a2 *v1.Deployment)) *Manager_DeployPublisherProxyResources_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1alpha1.Eventing), args[2].(*v1.Deployment))
	})
	return _c
}

func (_c *Manager_DeployPublisherProxyResources_Call) Return(_a0 error) *Manager_DeployPublisherProxyResources_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Manager_DeployPublisherProxyResources_Call) RunAndReturn(run func(context.Context, *v1alpha1.Eventing, *v1.Deployment) error) *Manager_DeployPublisherProxyResources_Call {
	_c.Call.Return(run)
	return _c
}

// GetBackendConfig provides a mock function with given fields:
func (_m *Manager) GetBackendConfig() *env.BackendConfig {
	ret := _m.Called()

	var r0 *env.BackendConfig
	if rf, ok := ret.Get(0).(func() *env.BackendConfig); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*env.BackendConfig)
		}
	}

	return r0
}

// Manager_GetBackendConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBackendConfig'
type Manager_GetBackendConfig_Call struct {
	*mock.Call
}

// GetBackendConfig is a helper method to define mock.On call
func (_e *Manager_Expecter) GetBackendConfig() *Manager_GetBackendConfig_Call {
	return &Manager_GetBackendConfig_Call{Call: _e.mock.On("GetBackendConfig")}
}

func (_c *Manager_GetBackendConfig_Call) Run(run func()) *Manager_GetBackendConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Manager_GetBackendConfig_Call) Return(_a0 *env.BackendConfig) *Manager_GetBackendConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Manager_GetBackendConfig_Call) RunAndReturn(run func() *env.BackendConfig) *Manager_GetBackendConfig_Call {
	_c.Call.Return(run)
	return _c
}

// GetNATSConfig provides a mock function with given fields:
func (_m *Manager) GetNATSConfig() env.NATSConfig {
	ret := _m.Called()

	var r0 env.NATSConfig
	if rf, ok := ret.Get(0).(func() env.NATSConfig); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(env.NATSConfig)
	}

	return r0
}

// Manager_GetNATSConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNATSConfig'
type Manager_GetNATSConfig_Call struct {
	*mock.Call
}

// GetNATSConfig is a helper method to define mock.On call
func (_e *Manager_Expecter) GetNATSConfig() *Manager_GetNATSConfig_Call {
	return &Manager_GetNATSConfig_Call{Call: _e.mock.On("GetNATSConfig")}
}

func (_c *Manager_GetNATSConfig_Call) Run(run func()) *Manager_GetNATSConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Manager_GetNATSConfig_Call) Return(_a0 env.NATSConfig) *Manager_GetNATSConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Manager_GetNATSConfig_Call) RunAndReturn(run func() env.NATSConfig) *Manager_GetNATSConfig_Call {
	_c.Call.Return(run)
	return _c
}

// IsNATSAvailable provides a mock function with given fields: ctx, namespace
func (_m *Manager) IsNATSAvailable(ctx context.Context, namespace string) (bool, error) {
	ret := _m.Called(ctx, namespace)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, namespace)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, namespace)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Manager_IsNATSAvailable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsNATSAvailable'
type Manager_IsNATSAvailable_Call struct {
	*mock.Call
}

// IsNATSAvailable is a helper method to define mock.On call
//   - ctx context.Context
//   - namespace string
func (_e *Manager_Expecter) IsNATSAvailable(ctx interface{}, namespace interface{}) *Manager_IsNATSAvailable_Call {
	return &Manager_IsNATSAvailable_Call{Call: _e.mock.On("IsNATSAvailable", ctx, namespace)}
}

func (_c *Manager_IsNATSAvailable_Call) Run(run func(ctx context.Context, namespace string)) *Manager_IsNATSAvailable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Manager_IsNATSAvailable_Call) Return(_a0 bool, _a1 error) *Manager_IsNATSAvailable_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Manager_IsNATSAvailable_Call) RunAndReturn(run func(context.Context, string) (bool, error)) *Manager_IsNATSAvailable_Call {
	_c.Call.Return(run)
	return _c
}

// NewManager creates a new instance of Manager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *Manager {
	mock := &Manager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
