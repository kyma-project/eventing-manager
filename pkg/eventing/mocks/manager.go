// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	context "context"

	env "github.com/kyma-project/kyma/components/eventing-controller/pkg/env"

	mock "github.com/stretchr/testify/mock"

	v1 "k8s.io/api/apps/v1"

	v1alpha1 "github.com/kyma-project/kyma/components/eventing-controller/api/v1alpha1"
)

// ECReconcilerClient is an autogenerated mock type for the ECReconcilerClient type
type ECReconcilerClient struct {
	mock.Mock
}

// CreateOrUpdatePublisherProxy provides a mock function with given fields: ctx, backend, natsConfig, backendConfig
func (_m *ECReconcilerClient) CreateOrUpdatePublisherProxy(ctx context.Context, backend v1alpha1.BackendType, natsConfig env.NATSConfig, backendConfig env.BackendConfig) (*v1.Deployment, error) {
	ret := _m.Called(ctx, backend, natsConfig, backendConfig)

	var r0 *v1.Deployment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, v1alpha1.BackendType, env.NATSConfig, env.BackendConfig) (*v1.Deployment, error)); ok {
		return rf(ctx, backend, natsConfig, backendConfig)
	}
	if rf, ok := ret.Get(0).(func(context.Context, v1alpha1.BackendType, env.NATSConfig, env.BackendConfig) *v1.Deployment); ok {
		r0 = rf(ctx, backend, natsConfig, backendConfig)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Deployment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, v1alpha1.BackendType, env.NATSConfig, env.BackendConfig) error); ok {
		r1 = rf(ctx, backend, natsConfig, backendConfig)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewECReconcilerClient creates a new instance of ECReconcilerClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewECReconcilerClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *ECReconcilerClient {
	mock := &ECReconcilerClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
