// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	context "context"

	v1alpha2 "github.com/kyma-project/kyma/components/eventing-controller/api/v1alpha2"
	mock "github.com/stretchr/testify/mock"
)

// APIGateway is an autogenerated mock type for the APIGateway type
type APIGateway struct {
	mock.Mock
}

type APIGateway_Expecter struct {
	mock *mock.Mock
}

func (_m *APIGateway) EXPECT() *APIGateway_Expecter {
	return &APIGateway_Expecter{mock: &_m.Mock}
}

// ExposeSink provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *APIGateway) ExposeSink(_a0 context.Context, _a1 v1alpha2.Subscription, _a2 string, _a3 string, _a4 string) (string, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, v1alpha2.Subscription, string, string, string) (string, error)); ok {
		return rf(_a0, _a1, _a2, _a3, _a4)
	}
	if rf, ok := ret.Get(0).(func(context.Context, v1alpha2.Subscription, string, string, string) string); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, v1alpha2.Subscription, string, string, string) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// APIGateway_ExposeSink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExposeSink'
type APIGateway_ExposeSink_Call struct {
	*mock.Call
}

// ExposeSink is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 v1alpha2.Subscription
//   - _a2 string
//   - _a3 string
//   - _a4 string
func (_e *APIGateway_Expecter) ExposeSink(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 interface{}, _a4 interface{}) *APIGateway_ExposeSink_Call {
	return &APIGateway_ExposeSink_Call{Call: _e.mock.On("ExposeSink", _a0, _a1, _a2, _a3, _a4)}
}

func (_c *APIGateway_ExposeSink_Call) Run(run func(_a0 context.Context, _a1 v1alpha2.Subscription, _a2 string, _a3 string, _a4 string)) *APIGateway_ExposeSink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(v1alpha2.Subscription), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *APIGateway_ExposeSink_Call) Return(_a0 string, _a1 error) *APIGateway_ExposeSink_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *APIGateway_ExposeSink_Call) RunAndReturn(run func(context.Context, v1alpha2.Subscription, string, string, string) (string, error)) *APIGateway_ExposeSink_Call {
	_c.Call.Return(run)
	return _c
}

// NewAPIGateway creates a new instance of APIGateway. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAPIGateway(t interface {
	mock.TestingT
	Cleanup(func())
}) *APIGateway {
	mock := &APIGateway{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
