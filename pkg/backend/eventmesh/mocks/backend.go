// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	cleaner "github.com/kyma-project/eventing-manager/pkg/backend/cleaner"
	env "github.com/kyma-project/eventing-manager/pkg/env"

	mock "github.com/stretchr/testify/mock"

	v1alpha2 "github.com/kyma-project/kyma/components/eventing-controller/api/v1alpha2"
)

// Backend is an autogenerated mock type for the Backend type
type Backend struct {
	mock.Mock
}

type Backend_Expecter struct {
	mock *mock.Mock
}

func (_m *Backend) EXPECT() *Backend_Expecter {
	return &Backend_Expecter{mock: &_m.Mock}
}

// DeleteSubscription provides a mock function with given fields: subscription
func (_m *Backend) DeleteSubscription(subscription *v1alpha2.Subscription) error {
	ret := _m.Called(subscription)

	var r0 error
	if rf, ok := ret.Get(0).(func(*v1alpha2.Subscription) error); ok {
		r0 = rf(subscription)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Backend_DeleteSubscription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSubscription'
type Backend_DeleteSubscription_Call struct {
	*mock.Call
}

// DeleteSubscription is a helper method to define mock.On call
//   - subscription *v1alpha2.Subscription
func (_e *Backend_Expecter) DeleteSubscription(subscription interface{}) *Backend_DeleteSubscription_Call {
	return &Backend_DeleteSubscription_Call{Call: _e.mock.On("DeleteSubscription", subscription)}
}

func (_c *Backend_DeleteSubscription_Call) Run(run func(subscription *v1alpha2.Subscription)) *Backend_DeleteSubscription_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*v1alpha2.Subscription))
	})
	return _c
}

func (_c *Backend_DeleteSubscription_Call) Return(_a0 error) *Backend_DeleteSubscription_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Backend_DeleteSubscription_Call) RunAndReturn(run func(*v1alpha2.Subscription) error) *Backend_DeleteSubscription_Call {
	_c.Call.Return(run)
	return _c
}

// Initialize provides a mock function with given fields: cfg
func (_m *Backend) Initialize(cfg env.Config) error {
	ret := _m.Called(cfg)

	var r0 error
	if rf, ok := ret.Get(0).(func(env.Config) error); ok {
		r0 = rf(cfg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Backend_Initialize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Initialize'
type Backend_Initialize_Call struct {
	*mock.Call
}

// Initialize is a helper method to define mock.On call
//   - cfg env.Config
func (_e *Backend_Expecter) Initialize(cfg interface{}) *Backend_Initialize_Call {
	return &Backend_Initialize_Call{Call: _e.mock.On("Initialize", cfg)}
}

func (_c *Backend_Initialize_Call) Run(run func(cfg env.Config)) *Backend_Initialize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(env.Config))
	})
	return _c
}

func (_c *Backend_Initialize_Call) Return(_a0 error) *Backend_Initialize_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Backend_Initialize_Call) RunAndReturn(run func(env.Config) error) *Backend_Initialize_Call {
	_c.Call.Return(run)
	return _c
}

// SyncSubscription provides a mock function with given fields: subscription, _a1, webhookURL
func (_m *Backend) SyncSubscription(subscription *v1alpha2.Subscription, _a1 cleaner.Cleaner, webhookURL string) (bool, error) {
	ret := _m.Called(subscription, _a1, webhookURL)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(*v1alpha2.Subscription, cleaner.Cleaner, string) (bool, error)); ok {
		return rf(subscription, _a1, webhookURL)
	}
	if rf, ok := ret.Get(0).(func(*v1alpha2.Subscription, cleaner.Cleaner, string) bool); ok {
		r0 = rf(subscription, _a1, webhookURL)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(*v1alpha2.Subscription, cleaner.Cleaner, string) error); ok {
		r1 = rf(subscription, _a1, webhookURL)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Backend_SyncSubscription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SyncSubscription'
type Backend_SyncSubscription_Call struct {
	*mock.Call
}

// SyncSubscription is a helper method to define mock.On call
//   - subscription *v1alpha2.Subscription
//   - _a1 cleaner.Cleaner
//   - webhookURL string
func (_e *Backend_Expecter) SyncSubscription(subscription interface{}, _a1 interface{}, webhookURL interface{}) *Backend_SyncSubscription_Call {
	return &Backend_SyncSubscription_Call{Call: _e.mock.On("SyncSubscription", subscription, _a1, webhookURL)}
}

func (_c *Backend_SyncSubscription_Call) Run(run func(subscription *v1alpha2.Subscription, _a1 cleaner.Cleaner, webhookURL string)) *Backend_SyncSubscription_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*v1alpha2.Subscription), args[1].(cleaner.Cleaner), args[2].(string))
	})
	return _c
}

func (_c *Backend_SyncSubscription_Call) Return(_a0 bool, _a1 error) *Backend_SyncSubscription_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Backend_SyncSubscription_Call) RunAndReturn(run func(*v1alpha2.Subscription, cleaner.Cleaner, string) (bool, error)) *Backend_SyncSubscription_Call {
	_c.Call.Return(run)
	return _c
}

// NewBackend creates a new instance of Backend. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBackend(t interface {
	mock.TestingT
	Cleanup(func())
}) *Backend {
	mock := &Backend{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
