// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	env "github.com/kyma-project/eventing-manager/pkg/env"
	manager "github.com/kyma-project/eventing-manager/pkg/subscriptionmanager/manager"
	mock "github.com/stretchr/testify/mock"

	v1alpha1 "github.com/kyma-project/eventing-manager/api/operator/v1alpha1"
)

// ManagerFactory is an autogenerated mock type for the ManagerFactory type
type ManagerFactory struct {
	mock.Mock
}

type ManagerFactory_Expecter struct {
	mock *mock.Mock
}

func (_m *ManagerFactory) EXPECT() *ManagerFactory_Expecter {
	return &ManagerFactory_Expecter{mock: &_m.Mock}
}

// NewEventMeshManager provides a mock function with given fields: domain
func (_m *ManagerFactory) NewEventMeshManager(domain string) (manager.Manager, error) {
	ret := _m.Called(domain)

	if len(ret) == 0 {
		panic("no return value specified for NewEventMeshManager")
	}

	var r0 manager.Manager
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (manager.Manager, error)); ok {
		return rf(domain)
	}
	if rf, ok := ret.Get(0).(func(string) manager.Manager); ok {
		r0 = rf(domain)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(manager.Manager)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ManagerFactory_NewEventMeshManager_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewEventMeshManager'
type ManagerFactory_NewEventMeshManager_Call struct {
	*mock.Call
}

// NewEventMeshManager is a helper method to define mock.On call
//   - domain string
func (_e *ManagerFactory_Expecter) NewEventMeshManager(domain interface{}) *ManagerFactory_NewEventMeshManager_Call {
	return &ManagerFactory_NewEventMeshManager_Call{Call: _e.mock.On("NewEventMeshManager", domain)}
}

func (_c *ManagerFactory_NewEventMeshManager_Call) Run(run func(domain string)) *ManagerFactory_NewEventMeshManager_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ManagerFactory_NewEventMeshManager_Call) Return(_a0 manager.Manager, _a1 error) *ManagerFactory_NewEventMeshManager_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ManagerFactory_NewEventMeshManager_Call) RunAndReturn(run func(string) (manager.Manager, error)) *ManagerFactory_NewEventMeshManager_Call {
	_c.Call.Return(run)
	return _c
}

// NewJetStreamManager provides a mock function with given fields: _a0, _a1
func (_m *ManagerFactory) NewJetStreamManager(_a0 v1alpha1.Eventing, _a1 env.NATSConfig) manager.Manager {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for NewJetStreamManager")
	}

	var r0 manager.Manager
	if rf, ok := ret.Get(0).(func(v1alpha1.Eventing, env.NATSConfig) manager.Manager); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(manager.Manager)
		}
	}

	return r0
}

// ManagerFactory_NewJetStreamManager_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewJetStreamManager'
type ManagerFactory_NewJetStreamManager_Call struct {
	*mock.Call
}

// NewJetStreamManager is a helper method to define mock.On call
//   - _a0 v1alpha1.Eventing
//   - _a1 env.NATSConfig
func (_e *ManagerFactory_Expecter) NewJetStreamManager(_a0 interface{}, _a1 interface{}) *ManagerFactory_NewJetStreamManager_Call {
	return &ManagerFactory_NewJetStreamManager_Call{Call: _e.mock.On("NewJetStreamManager", _a0, _a1)}
}

func (_c *ManagerFactory_NewJetStreamManager_Call) Run(run func(_a0 v1alpha1.Eventing, _a1 env.NATSConfig)) *ManagerFactory_NewJetStreamManager_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(v1alpha1.Eventing), args[1].(env.NATSConfig))
	})
	return _c
}

func (_c *ManagerFactory_NewJetStreamManager_Call) Return(_a0 manager.Manager) *ManagerFactory_NewJetStreamManager_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ManagerFactory_NewJetStreamManager_Call) RunAndReturn(run func(v1alpha1.Eventing, env.NATSConfig) manager.Manager) *ManagerFactory_NewJetStreamManager_Call {
	_c.Call.Return(run)
	return _c
}

// NewManagerFactory creates a new instance of ManagerFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewManagerFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *ManagerFactory {
	mock := &ManagerFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
