// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	admissionregistrationv1 "k8s.io/api/admissionregistration/v1"
	appsv1 "k8s.io/api/apps/v1"

	client "sigs.k8s.io/controller-runtime/pkg/client"

	context "context"

	corev1 "k8s.io/api/core/v1"

	mock "github.com/stretchr/testify/mock"

	v1 "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1"

	v1alpha1 "github.com/kyma-project/nats-manager/api/v1alpha1"

	v1alpha2 "github.com/kyma-project/eventing-manager/api/eventing/v1alpha2"

	v1beta1 "istio.io/client-go/pkg/apis/security/v1beta1"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

type Client_Expecter struct {
	mock *mock.Mock
}

func (_m *Client) EXPECT() *Client_Expecter {
	return &Client_Expecter{mock: &_m.Mock}
}

// APIRuleCRDExists provides a mock function with given fields: ctx
func (_m *Client) APIRuleCRDExists(ctx context.Context) (bool, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for APIRuleCRDExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (bool, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_APIRuleCRDExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'APIRuleCRDExists'
type Client_APIRuleCRDExists_Call struct {
	*mock.Call
}

// APIRuleCRDExists is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Client_Expecter) APIRuleCRDExists(ctx interface{}) *Client_APIRuleCRDExists_Call {
	return &Client_APIRuleCRDExists_Call{Call: _e.mock.On("APIRuleCRDExists", ctx)}
}

func (_c *Client_APIRuleCRDExists_Call) Run(run func(ctx context.Context)) *Client_APIRuleCRDExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Client_APIRuleCRDExists_Call) Return(_a0 bool, _a1 error) *Client_APIRuleCRDExists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_APIRuleCRDExists_Call) RunAndReturn(run func(context.Context) (bool, error)) *Client_APIRuleCRDExists_Call {
	_c.Call.Return(run)
	return _c
}

// ApplicationCRDExists provides a mock function with given fields: ctx
func (_m *Client) ApplicationCRDExists(ctx context.Context) (bool, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ApplicationCRDExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (bool, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_ApplicationCRDExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ApplicationCRDExists'
type Client_ApplicationCRDExists_Call struct {
	*mock.Call
}

// ApplicationCRDExists is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Client_Expecter) ApplicationCRDExists(ctx interface{}) *Client_ApplicationCRDExists_Call {
	return &Client_ApplicationCRDExists_Call{Call: _e.mock.On("ApplicationCRDExists", ctx)}
}

func (_c *Client_ApplicationCRDExists_Call) Run(run func(ctx context.Context)) *Client_ApplicationCRDExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Client_ApplicationCRDExists_Call) Return(_a0 bool, _a1 error) *Client_ApplicationCRDExists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_ApplicationCRDExists_Call) RunAndReturn(run func(context.Context) (bool, error)) *Client_ApplicationCRDExists_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteClusterRole provides a mock function with given fields: ctx, name, namespace
func (_m *Client) DeleteClusterRole(ctx context.Context, name string, namespace string) error {
	ret := _m.Called(ctx, name, namespace)

	if len(ret) == 0 {
		panic("no return value specified for DeleteClusterRole")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, name, namespace)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Client_DeleteClusterRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteClusterRole'
type Client_DeleteClusterRole_Call struct {
	*mock.Call
}

// DeleteClusterRole is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - namespace string
func (_e *Client_Expecter) DeleteClusterRole(ctx interface{}, name interface{}, namespace interface{}) *Client_DeleteClusterRole_Call {
	return &Client_DeleteClusterRole_Call{Call: _e.mock.On("DeleteClusterRole", ctx, name, namespace)}
}

func (_c *Client_DeleteClusterRole_Call) Run(run func(ctx context.Context, name string, namespace string)) *Client_DeleteClusterRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *Client_DeleteClusterRole_Call) Return(_a0 error) *Client_DeleteClusterRole_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_DeleteClusterRole_Call) RunAndReturn(run func(context.Context, string, string) error) *Client_DeleteClusterRole_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteClusterRoleBinding provides a mock function with given fields: ctx, name, namespace
func (_m *Client) DeleteClusterRoleBinding(ctx context.Context, name string, namespace string) error {
	ret := _m.Called(ctx, name, namespace)

	if len(ret) == 0 {
		panic("no return value specified for DeleteClusterRoleBinding")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, name, namespace)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Client_DeleteClusterRoleBinding_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteClusterRoleBinding'
type Client_DeleteClusterRoleBinding_Call struct {
	*mock.Call
}

// DeleteClusterRoleBinding is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - namespace string
func (_e *Client_Expecter) DeleteClusterRoleBinding(ctx interface{}, name interface{}, namespace interface{}) *Client_DeleteClusterRoleBinding_Call {
	return &Client_DeleteClusterRoleBinding_Call{Call: _e.mock.On("DeleteClusterRoleBinding", ctx, name, namespace)}
}

func (_c *Client_DeleteClusterRoleBinding_Call) Run(run func(ctx context.Context, name string, namespace string)) *Client_DeleteClusterRoleBinding_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *Client_DeleteClusterRoleBinding_Call) Return(_a0 error) *Client_DeleteClusterRoleBinding_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_DeleteClusterRoleBinding_Call) RunAndReturn(run func(context.Context, string, string) error) *Client_DeleteClusterRoleBinding_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteDeployment provides a mock function with given fields: ctx, name, namespace
func (_m *Client) DeleteDeployment(ctx context.Context, name string, namespace string) error {
	ret := _m.Called(ctx, name, namespace)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDeployment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, name, namespace)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Client_DeleteDeployment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDeployment'
type Client_DeleteDeployment_Call struct {
	*mock.Call
}

// DeleteDeployment is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - namespace string
func (_e *Client_Expecter) DeleteDeployment(ctx interface{}, name interface{}, namespace interface{}) *Client_DeleteDeployment_Call {
	return &Client_DeleteDeployment_Call{Call: _e.mock.On("DeleteDeployment", ctx, name, namespace)}
}

func (_c *Client_DeleteDeployment_Call) Run(run func(ctx context.Context, name string, namespace string)) *Client_DeleteDeployment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *Client_DeleteDeployment_Call) Return(_a0 error) *Client_DeleteDeployment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_DeleteDeployment_Call) RunAndReturn(run func(context.Context, string, string) error) *Client_DeleteDeployment_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteResource provides a mock function with given fields: ctx, object
func (_m *Client) DeleteResource(ctx context.Context, object client.Object) error {
	ret := _m.Called(ctx, object)

	if len(ret) == 0 {
		panic("no return value specified for DeleteResource")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, client.Object) error); ok {
		r0 = rf(ctx, object)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Client_DeleteResource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteResource'
type Client_DeleteResource_Call struct {
	*mock.Call
}

// DeleteResource is a helper method to define mock.On call
//   - ctx context.Context
//   - object client.Object
func (_e *Client_Expecter) DeleteResource(ctx interface{}, object interface{}) *Client_DeleteResource_Call {
	return &Client_DeleteResource_Call{Call: _e.mock.On("DeleteResource", ctx, object)}
}

func (_c *Client_DeleteResource_Call) Run(run func(ctx context.Context, object client.Object)) *Client_DeleteResource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.Object))
	})
	return _c
}

func (_c *Client_DeleteResource_Call) Return(_a0 error) *Client_DeleteResource_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_DeleteResource_Call) RunAndReturn(run func(context.Context, client.Object) error) *Client_DeleteResource_Call {
	_c.Call.Return(run)
	return _c
}

// GetCRD provides a mock function with given fields: ctx, name
func (_m *Client) GetCRD(ctx context.Context, name string) (*v1.CustomResourceDefinition, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetCRD")
	}

	var r0 *v1.CustomResourceDefinition
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*v1.CustomResourceDefinition, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *v1.CustomResourceDefinition); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.CustomResourceDefinition)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetCRD_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCRD'
type Client_GetCRD_Call struct {
	*mock.Call
}

// GetCRD is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *Client_Expecter) GetCRD(ctx interface{}, name interface{}) *Client_GetCRD_Call {
	return &Client_GetCRD_Call{Call: _e.mock.On("GetCRD", ctx, name)}
}

func (_c *Client_GetCRD_Call) Run(run func(ctx context.Context, name string)) *Client_GetCRD_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Client_GetCRD_Call) Return(_a0 *v1.CustomResourceDefinition, _a1 error) *Client_GetCRD_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetCRD_Call) RunAndReturn(run func(context.Context, string) (*v1.CustomResourceDefinition, error)) *Client_GetCRD_Call {
	_c.Call.Return(run)
	return _c
}

// GetConfigMap provides a mock function with given fields: ctx, name, namespace
func (_m *Client) GetConfigMap(ctx context.Context, name string, namespace string) (*corev1.ConfigMap, error) {
	ret := _m.Called(ctx, name, namespace)

	if len(ret) == 0 {
		panic("no return value specified for GetConfigMap")
	}

	var r0 *corev1.ConfigMap
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*corev1.ConfigMap, error)); ok {
		return rf(ctx, name, namespace)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *corev1.ConfigMap); ok {
		r0 = rf(ctx, name, namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*corev1.ConfigMap)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, name, namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetConfigMap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConfigMap'
type Client_GetConfigMap_Call struct {
	*mock.Call
}

// GetConfigMap is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - namespace string
func (_e *Client_Expecter) GetConfigMap(ctx interface{}, name interface{}, namespace interface{}) *Client_GetConfigMap_Call {
	return &Client_GetConfigMap_Call{Call: _e.mock.On("GetConfigMap", ctx, name, namespace)}
}

func (_c *Client_GetConfigMap_Call) Run(run func(ctx context.Context, name string, namespace string)) *Client_GetConfigMap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *Client_GetConfigMap_Call) Return(_a0 *corev1.ConfigMap, _a1 error) *Client_GetConfigMap_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetConfigMap_Call) RunAndReturn(run func(context.Context, string, string) (*corev1.ConfigMap, error)) *Client_GetConfigMap_Call {
	_c.Call.Return(run)
	return _c
}

// GetDeployment provides a mock function with given fields: ctx, name, namespace
func (_m *Client) GetDeployment(ctx context.Context, name string, namespace string) (*appsv1.Deployment, error) {
	ret := _m.Called(ctx, name, namespace)

	if len(ret) == 0 {
		panic("no return value specified for GetDeployment")
	}

	var r0 *appsv1.Deployment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*appsv1.Deployment, error)); ok {
		return rf(ctx, name, namespace)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *appsv1.Deployment); ok {
		r0 = rf(ctx, name, namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appsv1.Deployment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, name, namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetDeployment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDeployment'
type Client_GetDeployment_Call struct {
	*mock.Call
}

// GetDeployment is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - namespace string
func (_e *Client_Expecter) GetDeployment(ctx interface{}, name interface{}, namespace interface{}) *Client_GetDeployment_Call {
	return &Client_GetDeployment_Call{Call: _e.mock.On("GetDeployment", ctx, name, namespace)}
}

func (_c *Client_GetDeployment_Call) Run(run func(ctx context.Context, name string, namespace string)) *Client_GetDeployment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *Client_GetDeployment_Call) Return(_a0 *appsv1.Deployment, _a1 error) *Client_GetDeployment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetDeployment_Call) RunAndReturn(run func(context.Context, string, string) (*appsv1.Deployment, error)) *Client_GetDeployment_Call {
	_c.Call.Return(run)
	return _c
}

// GetDeploymentDynamic provides a mock function with given fields: ctx, name, namespace
func (_m *Client) GetDeploymentDynamic(ctx context.Context, name string, namespace string) (*appsv1.Deployment, error) {
	ret := _m.Called(ctx, name, namespace)

	if len(ret) == 0 {
		panic("no return value specified for GetDeploymentDynamic")
	}

	var r0 *appsv1.Deployment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*appsv1.Deployment, error)); ok {
		return rf(ctx, name, namespace)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *appsv1.Deployment); ok {
		r0 = rf(ctx, name, namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appsv1.Deployment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, name, namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetDeploymentDynamic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDeploymentDynamic'
type Client_GetDeploymentDynamic_Call struct {
	*mock.Call
}

// GetDeploymentDynamic is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - namespace string
func (_e *Client_Expecter) GetDeploymentDynamic(ctx interface{}, name interface{}, namespace interface{}) *Client_GetDeploymentDynamic_Call {
	return &Client_GetDeploymentDynamic_Call{Call: _e.mock.On("GetDeploymentDynamic", ctx, name, namespace)}
}

func (_c *Client_GetDeploymentDynamic_Call) Run(run func(ctx context.Context, name string, namespace string)) *Client_GetDeploymentDynamic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *Client_GetDeploymentDynamic_Call) Return(_a0 *appsv1.Deployment, _a1 error) *Client_GetDeploymentDynamic_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetDeploymentDynamic_Call) RunAndReturn(run func(context.Context, string, string) (*appsv1.Deployment, error)) *Client_GetDeploymentDynamic_Call {
	_c.Call.Return(run)
	return _c
}

// GetMutatingWebHookConfiguration provides a mock function with given fields: ctx, name
func (_m *Client) GetMutatingWebHookConfiguration(ctx context.Context, name string) (*admissionregistrationv1.MutatingWebhookConfiguration, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetMutatingWebHookConfiguration")
	}

	var r0 *admissionregistrationv1.MutatingWebhookConfiguration
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*admissionregistrationv1.MutatingWebhookConfiguration, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *admissionregistrationv1.MutatingWebhookConfiguration); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admissionregistrationv1.MutatingWebhookConfiguration)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetMutatingWebHookConfiguration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMutatingWebHookConfiguration'
type Client_GetMutatingWebHookConfiguration_Call struct {
	*mock.Call
}

// GetMutatingWebHookConfiguration is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *Client_Expecter) GetMutatingWebHookConfiguration(ctx interface{}, name interface{}) *Client_GetMutatingWebHookConfiguration_Call {
	return &Client_GetMutatingWebHookConfiguration_Call{Call: _e.mock.On("GetMutatingWebHookConfiguration", ctx, name)}
}

func (_c *Client_GetMutatingWebHookConfiguration_Call) Run(run func(ctx context.Context, name string)) *Client_GetMutatingWebHookConfiguration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Client_GetMutatingWebHookConfiguration_Call) Return(_a0 *admissionregistrationv1.MutatingWebhookConfiguration, _a1 error) *Client_GetMutatingWebHookConfiguration_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetMutatingWebHookConfiguration_Call) RunAndReturn(run func(context.Context, string) (*admissionregistrationv1.MutatingWebhookConfiguration, error)) *Client_GetMutatingWebHookConfiguration_Call {
	_c.Call.Return(run)
	return _c
}

// GetNATSResources provides a mock function with given fields: ctx, namespace
func (_m *Client) GetNATSResources(ctx context.Context, namespace string) (*v1alpha1.NATSList, error) {
	ret := _m.Called(ctx, namespace)

	if len(ret) == 0 {
		panic("no return value specified for GetNATSResources")
	}

	var r0 *v1alpha1.NATSList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*v1alpha1.NATSList, error)); ok {
		return rf(ctx, namespace)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *v1alpha1.NATSList); ok {
		r0 = rf(ctx, namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.NATSList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetNATSResources_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNATSResources'
type Client_GetNATSResources_Call struct {
	*mock.Call
}

// GetNATSResources is a helper method to define mock.On call
//   - ctx context.Context
//   - namespace string
func (_e *Client_Expecter) GetNATSResources(ctx interface{}, namespace interface{}) *Client_GetNATSResources_Call {
	return &Client_GetNATSResources_Call{Call: _e.mock.On("GetNATSResources", ctx, namespace)}
}

func (_c *Client_GetNATSResources_Call) Run(run func(ctx context.Context, namespace string)) *Client_GetNATSResources_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Client_GetNATSResources_Call) Return(_a0 *v1alpha1.NATSList, _a1 error) *Client_GetNATSResources_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetNATSResources_Call) RunAndReturn(run func(context.Context, string) (*v1alpha1.NATSList, error)) *Client_GetNATSResources_Call {
	_c.Call.Return(run)
	return _c
}

// GetSecret provides a mock function with given fields: ctx, namespacedName
func (_m *Client) GetSecret(ctx context.Context, namespacedName string) (*corev1.Secret, error) {
	ret := _m.Called(ctx, namespacedName)

	if len(ret) == 0 {
		panic("no return value specified for GetSecret")
	}

	var r0 *corev1.Secret
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*corev1.Secret, error)); ok {
		return rf(ctx, namespacedName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *corev1.Secret); ok {
		r0 = rf(ctx, namespacedName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*corev1.Secret)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, namespacedName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetSecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSecret'
type Client_GetSecret_Call struct {
	*mock.Call
}

// GetSecret is a helper method to define mock.On call
//   - ctx context.Context
//   - namespacedName string
func (_e *Client_Expecter) GetSecret(ctx interface{}, namespacedName interface{}) *Client_GetSecret_Call {
	return &Client_GetSecret_Call{Call: _e.mock.On("GetSecret", ctx, namespacedName)}
}

func (_c *Client_GetSecret_Call) Run(run func(ctx context.Context, namespacedName string)) *Client_GetSecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Client_GetSecret_Call) Return(_a0 *corev1.Secret, _a1 error) *Client_GetSecret_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetSecret_Call) RunAndReturn(run func(context.Context, string) (*corev1.Secret, error)) *Client_GetSecret_Call {
	_c.Call.Return(run)
	return _c
}

// GetSubscriptions provides a mock function with given fields: ctx
func (_m *Client) GetSubscriptions(ctx context.Context) (*v1alpha2.SubscriptionList, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetSubscriptions")
	}

	var r0 *v1alpha2.SubscriptionList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*v1alpha2.SubscriptionList, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *v1alpha2.SubscriptionList); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha2.SubscriptionList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetSubscriptions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSubscriptions'
type Client_GetSubscriptions_Call struct {
	*mock.Call
}

// GetSubscriptions is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Client_Expecter) GetSubscriptions(ctx interface{}) *Client_GetSubscriptions_Call {
	return &Client_GetSubscriptions_Call{Call: _e.mock.On("GetSubscriptions", ctx)}
}

func (_c *Client_GetSubscriptions_Call) Run(run func(ctx context.Context)) *Client_GetSubscriptions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Client_GetSubscriptions_Call) Return(_a0 *v1alpha2.SubscriptionList, _a1 error) *Client_GetSubscriptions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetSubscriptions_Call) RunAndReturn(run func(context.Context) (*v1alpha2.SubscriptionList, error)) *Client_GetSubscriptions_Call {
	_c.Call.Return(run)
	return _c
}

// GetValidatingWebHookConfiguration provides a mock function with given fields: ctx, name
func (_m *Client) GetValidatingWebHookConfiguration(ctx context.Context, name string) (*admissionregistrationv1.ValidatingWebhookConfiguration, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetValidatingWebHookConfiguration")
	}

	var r0 *admissionregistrationv1.ValidatingWebhookConfiguration
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*admissionregistrationv1.ValidatingWebhookConfiguration, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *admissionregistrationv1.ValidatingWebhookConfiguration); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admissionregistrationv1.ValidatingWebhookConfiguration)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetValidatingWebHookConfiguration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetValidatingWebHookConfiguration'
type Client_GetValidatingWebHookConfiguration_Call struct {
	*mock.Call
}

// GetValidatingWebHookConfiguration is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *Client_Expecter) GetValidatingWebHookConfiguration(ctx interface{}, name interface{}) *Client_GetValidatingWebHookConfiguration_Call {
	return &Client_GetValidatingWebHookConfiguration_Call{Call: _e.mock.On("GetValidatingWebHookConfiguration", ctx, name)}
}

func (_c *Client_GetValidatingWebHookConfiguration_Call) Run(run func(ctx context.Context, name string)) *Client_GetValidatingWebHookConfiguration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Client_GetValidatingWebHookConfiguration_Call) Return(_a0 *admissionregistrationv1.ValidatingWebhookConfiguration, _a1 error) *Client_GetValidatingWebHookConfiguration_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetValidatingWebHookConfiguration_Call) RunAndReturn(run func(context.Context, string) (*admissionregistrationv1.ValidatingWebhookConfiguration, error)) *Client_GetValidatingWebHookConfiguration_Call {
	_c.Call.Return(run)
	return _c
}

// PatchApply provides a mock function with given fields: ctx, object
func (_m *Client) PatchApply(ctx context.Context, object client.Object) error {
	ret := _m.Called(ctx, object)

	if len(ret) == 0 {
		panic("no return value specified for PatchApply")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, client.Object) error); ok {
		r0 = rf(ctx, object)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Client_PatchApply_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchApply'
type Client_PatchApply_Call struct {
	*mock.Call
}

// PatchApply is a helper method to define mock.On call
//   - ctx context.Context
//   - object client.Object
func (_e *Client_Expecter) PatchApply(ctx interface{}, object interface{}) *Client_PatchApply_Call {
	return &Client_PatchApply_Call{Call: _e.mock.On("PatchApply", ctx, object)}
}

func (_c *Client_PatchApply_Call) Run(run func(ctx context.Context, object client.Object)) *Client_PatchApply_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.Object))
	})
	return _c
}

func (_c *Client_PatchApply_Call) Return(_a0 error) *Client_PatchApply_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_PatchApply_Call) RunAndReturn(run func(context.Context, client.Object) error) *Client_PatchApply_Call {
	_c.Call.Return(run)
	return _c
}

// PatchApplyPeerAuthentication provides a mock function with given fields: ctx, authentication
func (_m *Client) PatchApplyPeerAuthentication(ctx context.Context, authentication *v1beta1.PeerAuthentication) error {
	ret := _m.Called(ctx, authentication)

	if len(ret) == 0 {
		panic("no return value specified for PatchApplyPeerAuthentication")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta1.PeerAuthentication) error); ok {
		r0 = rf(ctx, authentication)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Client_PatchApplyPeerAuthentication_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchApplyPeerAuthentication'
type Client_PatchApplyPeerAuthentication_Call struct {
	*mock.Call
}

// PatchApplyPeerAuthentication is a helper method to define mock.On call
//   - ctx context.Context
//   - authentication *v1beta1.PeerAuthentication
func (_e *Client_Expecter) PatchApplyPeerAuthentication(ctx interface{}, authentication interface{}) *Client_PatchApplyPeerAuthentication_Call {
	return &Client_PatchApplyPeerAuthentication_Call{Call: _e.mock.On("PatchApplyPeerAuthentication", ctx, authentication)}
}

func (_c *Client_PatchApplyPeerAuthentication_Call) Run(run func(ctx context.Context, authentication *v1beta1.PeerAuthentication)) *Client_PatchApplyPeerAuthentication_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1beta1.PeerAuthentication))
	})
	return _c
}

func (_c *Client_PatchApplyPeerAuthentication_Call) Return(_a0 error) *Client_PatchApplyPeerAuthentication_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_PatchApplyPeerAuthentication_Call) RunAndReturn(run func(context.Context, *v1beta1.PeerAuthentication) error) *Client_PatchApplyPeerAuthentication_Call {
	_c.Call.Return(run)
	return _c
}

// PeerAuthenticationCRDExists provides a mock function with given fields: ctx
func (_m *Client) PeerAuthenticationCRDExists(ctx context.Context) (bool, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for PeerAuthenticationCRDExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (bool, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_PeerAuthenticationCRDExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PeerAuthenticationCRDExists'
type Client_PeerAuthenticationCRDExists_Call struct {
	*mock.Call
}

// PeerAuthenticationCRDExists is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Client_Expecter) PeerAuthenticationCRDExists(ctx interface{}) *Client_PeerAuthenticationCRDExists_Call {
	return &Client_PeerAuthenticationCRDExists_Call{Call: _e.mock.On("PeerAuthenticationCRDExists", ctx)}
}

func (_c *Client_PeerAuthenticationCRDExists_Call) Run(run func(ctx context.Context)) *Client_PeerAuthenticationCRDExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Client_PeerAuthenticationCRDExists_Call) Return(_a0 bool, _a1 error) *Client_PeerAuthenticationCRDExists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_PeerAuthenticationCRDExists_Call) RunAndReturn(run func(context.Context) (bool, error)) *Client_PeerAuthenticationCRDExists_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateDeployment provides a mock function with given fields: ctx, deployment
func (_m *Client) UpdateDeployment(ctx context.Context, deployment *appsv1.Deployment) error {
	ret := _m.Called(ctx, deployment)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDeployment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *appsv1.Deployment) error); ok {
		r0 = rf(ctx, deployment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Client_UpdateDeployment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateDeployment'
type Client_UpdateDeployment_Call struct {
	*mock.Call
}

// UpdateDeployment is a helper method to define mock.On call
//   - ctx context.Context
//   - deployment *appsv1.Deployment
func (_e *Client_Expecter) UpdateDeployment(ctx interface{}, deployment interface{}) *Client_UpdateDeployment_Call {
	return &Client_UpdateDeployment_Call{Call: _e.mock.On("UpdateDeployment", ctx, deployment)}
}

func (_c *Client_UpdateDeployment_Call) Run(run func(ctx context.Context, deployment *appsv1.Deployment)) *Client_UpdateDeployment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*appsv1.Deployment))
	})
	return _c
}

func (_c *Client_UpdateDeployment_Call) Return(_a0 error) *Client_UpdateDeployment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_UpdateDeployment_Call) RunAndReturn(run func(context.Context, *appsv1.Deployment) error) *Client_UpdateDeployment_Call {
	_c.Call.Return(run)
	return _c
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
